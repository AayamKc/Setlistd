USER PAGE IMPLEMENTATION PLAN
============================

OVERVIEW
--------
Create a comprehensive user profile system with social features, allowing users to showcase their concert history, create posts, manage wishlists, and connect with other music fans.

COMPLETED FEATURES
------------------
- **User Model:** The `User` model in MongoDB has been extended to include fields for profile picture, banner image, bio, location, social links, followers, following, and concert lists (attended, wishlist, favorites).
- **User Profile Page:** The basic structure of the user profile page is in place, including a header, tabs for different content sections, and the main content area.
- **Fetch User Profile:** The frontend can fetch user profile data from the backend based on the username in the URL.
- **Follow/Unfollow:** The functionality to follow and unfollow users is implemented on both the frontend and backend.
- **Image Uploads:** Backend routes are set up for uploading profile pictures and banner images using Supabase storage.
- **Concert Lists:** Backend routes are available to add and remove concerts from a user's attended, wishlist, and favorites lists.
- **API Routes:** All the necessary API routes for user profiles, concert management, and social features have been created.

IN-PROGRESS/TO-DO
-----------------

PHASE 1: Fix Concert Review Display Issue ✅ COMPLETED
-----------------------------------------
**Problem:** When opening a concert card from the attended page, reviews are not displayed even though they exist. This is because ConcertModal is looking for `event.id` but events from the database use `_id` and `seatgeekId`.

**Solution Implemented:** Updated ConcertModal.jsx to use `event.seatgeekId` instead of `event.id` throughout the component.

-----------------

PHASE 2: Add Concert to Lists from Catalog ✅ COMPLETED
------------------------------------------
**Problem:** Users can browse concerts in the catalog but cannot add them to their attended, wishlist, or favorites lists without going to their profile page.

**Solution Implemented:** 
- Fixed CatalogModal to preserve MongoDB _id correctly
- Updated ProfileHeader handleConcertSelect to use correct concert ID
- Added better error handling and debugging

-----------------

PHASE 3: Improve Catalog UX and Concert Filtering
-------------------------------------------------
**Problem:** The catalog needs better user feedback and date-based filtering for concert tabs.

**Requirements:**
1. **Loading State**: When adding a concert, show "Adding..." loading screen
2. **Page Refresh**: After successfully adding, refresh to show the updated lists
3. **Date-based Tab Filtering**:
   - Wishlist tab: Show only upcoming concerts (future dates)
   - Attended tab: Show only past concerts
   - Favorites tab: Show only past concerts

**Current Issues:**
- No visual feedback during the add operation
- User doesn't see their lists update immediately
- All concerts show in all tabs regardless of date

**Solution Plan:**
1. **Add Loading State to ProfileHeader**:
   - Create loading overlay with "Adding..." message
   - Show during API call
   - Block user interaction while loading

2. **Implement Page Refresh**:
   - After successful add, refresh the page
   - This ensures profile data is up-to-date
   - Shows the newly added concert in the appropriate list

3. **Update CatalogModal Concert Filtering**:
   - Filter concerts based on selected tab and current date
   - Wishlist: filter for datetime_local > now
   - Attended/Favorites: filter for datetime_local <= now
   - Update the filtered results when tab changes

**Files to modify:**
- `client/src/components/ProfileHeader.jsx` - Add loading state and refresh
- `client/src/components/CatalogModal.jsx` - Add date-based filtering

-----------------

- **Frontend for Concert Lists:** While the backend is ready, the frontend components to display and manage the attended, wishlist, and favorites concert lists still need to be fully implemented.
- **Posts System:** The entire posts system, from the `Post` model and API to the frontend components for creating, viewing, and interacting with posts, is yet to be built.
- **Edit Profile Modal:** The modal for editing user profile information needs to be created.
- **Search Functionality:** While a backend route for user search exists, the frontend implementation is pending.
- **Notifications:** The notification system for events like new followers or post interactions has not been started.
- **Privacy Settings:** The ability for users to make their profiles private is not yet implemented.
- **Error Handling and UI Feedback:** Improve loading states, error messages, and provide better user feedback throughout the profile section.
